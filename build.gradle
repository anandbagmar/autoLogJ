apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'io.qameta.allure'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.5"
    }
}

repositories {
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-nop:1.7.25'
    compile "cglib:cglib:3.2.7"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.0"
}

allure {
    version = "${allure_version}"

    autoconfigure = true
    aspectjweaver = true
    clean = true

    resultsDir = file("${buildDir}/test-results/allure-results")
    reportDir = file("${buildDir}/test-results/allure-reports")

    useTestNG {
        version = "${allure_java_version}"
    }

    downloadLink = "https://dl.bintray.com/qameta/generic/io/qameta/allure/allure/${allure_version}/allure-${allure_version}.zip"
}

task openAllureReport(type: Exec) {

    commandLine ".allure/allure-${allure_version}/bin/allure", "open", "${buildDir}/test-results/allure-reports"

    doFirst {
        downloadAllure.execute()
        if (file('.allure').exists()) {
            exec {
                commandLine "chmod", "755", ".allure/allure-${allure_version}/bin/allure"
            }
        } else {
            throw new RuntimeException('downloadAllure task did not execute successfully');
        }
    }
}

clean.doFirst {
    System.out.println "Delete build / logs / out / test-output / allure-results directories, IF they exist"
    delete "${rootDir}/build"
    delete "${rootDir}/logs"
    delete "${rootDir}/out"
    delete "${rootDir}/test-output"
    delete "${rootDir}/allure-results"
}

clean.doLast {
    System.out.println "Create logs directory"
    mkdir "${rootDir}/logs"
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.8"
}
